import socket
import struct
import serial
import time

# UDP settings
UDP_IP = "0.0.0.0"  # Listen on all available interfaces
UDP_PORT = 8888     # Same port as in Unity script

# Serial settings
SERIAL_PORT = "/dev/ttyACM0"  # Adjust this to match your Arduino's serial port
BAUD_RATE = 115200

def init_udp():
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((UDP_IP, UDP_PORT))
    print(f"Listening for UDP packets on {UDP_IP}:{UDP_PORT}")
    return sock

def init_serial():
    ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
    time.sleep(2)  # Allow time for Arduino to reset
    print(f"Serial connection established on {SERIAL_PORT}")
    return ser

def process_udp_data(data):
    # Assuming 12 float values (4 legs, 3 angles each)
    angles = struct.unpack('12f', data)
    # Convert to integers (assuming Arduino expects integer angles)
    angles_int = [int(angle) for angle in angles]
    # Create a comma-separated string
    return ','.join(map(str, angles_int))

def main():
    udp_socket = init_udp()
    serial_conn = init_serial()

    try:
        while True:
            data, addr = udp_socket.recvfrom(1024)  # Buffer size is 1024 bytes
            processed_data = process_udp_data(data)
            print(f"Received data: {processed_data}")
            
            # Send to Arduino
            serial_conn.write(f"{processed_data}\n".encode())
            
            # Optional: Read response from Arduino
            response = serial_conn.readline().decode().strip()
            if response:
                print(f"Arduino response: {response}")

    except KeyboardInterrupt:
        print("Interrupted by user, shutting down...")
    fin
